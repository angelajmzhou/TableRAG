  0%|          | 0/3053 [00:00<?, ?it/s]  1%|          | 33/3053 [00:00<00:09, 327.25it/s]  2%|▏         | 67/3053 [00:00<00:09, 331.03it/s]  3%|▎         | 101/3053 [00:00<00:08, 329.12it/s]  4%|▍         | 135/3053 [00:00<00:08, 329.75it/s]  6%|▌         | 168/3053 [00:00<00:08, 328.87it/s]  7%|▋         | 201/3053 [00:00<00:11, 258.62it/s]  8%|▊         | 235/3053 [00:00<00:10, 280.43it/s]  9%|▉         | 269/3053 [00:00<00:09, 296.61it/s] 10%|▉         | 302/3053 [00:00<00:09, 304.87it/s] 11%|█         | 336/3053 [00:01<00:08, 313.49it/s] 12%|█▏        | 370/3053 [00:01<00:08, 320.35it/s] 13%|█▎        | 403/3053 [00:01<00:08, 322.33it/s] 14%|█▍        | 437/3053 [00:01<00:07, 327.50it/s] 15%|█▌        | 472/3053 [00:01<00:07, 331.56it/s] 17%|█▋        | 506/3053 [00:01<00:07, 332.02it/s] 18%|█▊        | 540/3053 [00:01<00:07, 333.10it/s] 19%|█▉        | 574/3053 [00:01<00:07, 334.49it/s] 20%|█▉        | 608/3053 [00:01<00:07, 333.23it/s] 21%|██        | 643/3053 [00:02<00:07, 335.21it/s] 22%|██▏       | 677/3053 [00:02<00:07, 332.46it/s] 23%|██▎       | 711/3053 [00:02<00:07, 331.23it/s] 24%|██▍       | 745/3053 [00:02<00:06, 330.27it/s] 26%|██▌       | 779/3053 [00:02<00:06, 329.02it/s] 27%|██▋       | 812/3053 [00:02<00:06, 326.37it/s] 28%|██▊       | 845/3053 [00:02<00:06, 326.50it/s] 29%|██▉       | 878/3053 [00:02<00:06, 323.92it/s] 30%|██▉       | 911/3053 [00:02<00:06, 324.61it/s] 31%|███       | 945/3053 [00:02<00:06, 326.73it/s] 32%|███▏      | 978/3053 [00:03<00:06, 327.27it/s] 33%|███▎      | 1012/3053 [00:03<00:06, 328.28it/s] 34%|███▍      | 1045/3053 [00:03<00:06, 327.88it/s] 35%|███▌      | 1080/3053 [00:03<00:05, 330.72it/s] 36%|███▋      | 1114/3053 [00:03<00:05, 332.17it/s] 38%|███▊      | 1149/3053 [00:03<00:05, 334.44it/s] 39%|███▊      | 1183/3053 [00:03<00:05, 333.09it/s] 40%|███▉      | 1217/3053 [00:03<00:05, 332.18it/s] 41%|████      | 1251/3053 [00:03<00:05, 331.21it/s] 42%|████▏     | 1286/3053 [00:03<00:05, 334.09it/s] 43%|████▎     | 1320/3053 [00:04<00:05, 333.89it/s] 44%|████▍     | 1354/3053 [00:04<00:05, 331.87it/s] 45%|████▌     | 1388/3053 [00:04<00:05, 332.90it/s] 47%|████▋     | 1422/3053 [00:04<00:04, 332.10it/s] 48%|████▊     | 1456/3053 [00:04<00:04, 333.52it/s] 49%|████▉     | 1490/3053 [00:04<00:04, 334.42it/s] 50%|████▉     | 1524/3053 [00:04<00:04, 335.81it/s] 51%|█████     | 1558/3053 [00:04<00:04, 332.62it/s] 52%|█████▏    | 1592/3053 [00:04<00:04, 330.01it/s] 53%|█████▎    | 1626/3053 [00:04<00:04, 332.32it/s] 54%|█████▍    | 1660/3053 [00:05<00:04, 330.12it/s] 55%|█████▌    | 1694/3053 [00:05<00:04, 331.71it/s] 57%|█████▋    | 1728/3053 [00:05<00:05, 258.80it/s] 58%|█████▊    | 1762/3053 [00:05<00:04, 277.56it/s] 59%|█████▉    | 1796/3053 [00:05<00:04, 293.11it/s] 60%|█████▉    | 1830/3053 [00:05<00:04, 304.24it/s] 61%|██████    | 1865/3053 [00:05<00:03, 314.83it/s] 62%|██████▏   | 1899/3053 [00:05<00:03, 321.69it/s] 63%|██████▎   | 1932/3053 [00:05<00:03, 323.76it/s] 64%|██████▍   | 1966/3053 [00:06<00:03, 325.62it/s] 65%|██████▌   | 1999/3053 [00:06<00:03, 325.39it/s] 67%|██████▋   | 2032/3053 [00:06<00:03, 322.17it/s] 68%|██████▊   | 2066/3053 [00:06<00:03, 324.98it/s] 69%|██████▉   | 2100/3053 [00:06<00:02, 328.64it/s] 70%|██████▉   | 2134/3053 [00:06<00:02, 331.42it/s] 71%|███████   | 2169/3053 [00:06<00:02, 334.06it/s] 72%|███████▏  | 2203/3053 [00:06<00:02, 333.58it/s] 73%|███████▎  | 2237/3053 [00:06<00:02, 332.35it/s] 74%|███████▍  | 2271/3053 [00:07<00:02, 329.24it/s] 75%|███████▌  | 2305/3053 [00:07<00:02, 329.98it/s] 77%|███████▋  | 2340/3053 [00:07<00:02, 334.55it/s] 78%|███████▊  | 2374/3053 [00:07<00:02, 334.30it/s] 79%|███████▉  | 2408/3053 [00:07<00:01, 333.34it/s] 80%|███████▉  | 2442/3053 [00:07<00:01, 334.38it/s] 81%|████████  | 2477/3053 [00:07<00:01, 336.55it/s] 82%|████████▏ | 2511/3053 [00:07<00:01, 335.37it/s] 83%|████████▎ | 2545/3053 [00:07<00:01, 333.44it/s] 84%|████████▍ | 2579/3053 [00:07<00:01, 331.85it/s] 86%|████████▌ | 2613/3053 [00:08<00:01, 332.66it/s] 87%|████████▋ | 2647/3053 [00:08<00:01, 333.42it/s] 88%|████████▊ | 2681/3053 [00:08<00:01, 334.60it/s] 89%|████████▉ | 2715/3053 [00:08<00:01, 334.92it/s] 90%|█████████ | 2749/3053 [00:08<00:00, 334.51it/s] 91%|█████████ | 2784/3053 [00:08<00:00, 337.03it/s] 92%|█████████▏| 2818/3053 [00:08<00:00, 335.27it/s] 93%|█████████▎| 2852/3053 [00:08<00:00, 333.91it/s] 95%|█████████▍| 2886/3053 [00:08<00:00, 334.59it/s] 96%|█████████▌| 2920/3053 [00:08<00:00, 330.82it/s] 97%|█████████▋| 2954/3053 [00:09<00:00, 331.15it/s] 98%|█████████▊| 2988/3053 [00:09<00:00, 331.83it/s] 99%|█████████▉| 3022/3053 [00:09<00:00, 329.99it/s]100%|██████████| 3053/3053 [00:09<00:00, 325.87it/s]
  0%|          | 0/3053 [00:00<?, ?it/s] 31%|███       | 943/3053 [00:00<00:00, 9425.16it/s] 62%|██████▏   | 1886/3053 [00:00<00:00, 9143.83it/s] 92%|█████████▏| 2821/3053 [00:00<00:00, 9232.63it/s]100%|██████████| 3053/3053 [00:00<00:00, 9210.71it/s]
Loading done.
Processing cases:   0%|          | 0/6106 [00:00<?, ?it/s]Processing cases:  27%|██▋       | 1671/6106 [00:00<00:00, 15839.37it/s]Processing cases:  53%|█████▎    | 3255/6106 [00:00<00:00, 13784.20it/s]Processing cases:  76%|███████▌  | 4648/6106 [00:00<00:00, 9104.94it/s] Processing cases:  93%|█████████▎| 5688/6106 [00:00<00:00, 7407.12it/s]Processing cases: 100%|██████████| 6106/6106 [00:02<00:00, 2691.65it/s]
embedding size (136447, 1024)
adding doc embeddings to faiss index
Building Index.
embedding completed
embed doc begin
  0%|          | 0/3 [00:00<?, ?it/s]
handling questions:   0%|          | 0/305 [00:00<?, ?it/s][A 33%|███▎      | 1/3 [00:00<00:00,  4.84it/s]100%|██████████| 3/3 [00:00<00:00, 13.33it/s]
2025-07-25 11:53:58,523 - ./logs/test.log - INFO - Inital prompt: You are completing a table-related question answering task. You are provided with a table in Markdown format and a user query.

Your goal is to reason step by step to determine if the question can be answered directly using the table, or if it should be decomposed.

If decomposition is needed, simulate calling the `solve_subquery` tool by outputting a JSON block in the following format:

{
  "tool_calls": [
    {
      "function": {
        "name": "solve_subquery",
        "arguments": {
          "subquery": "<your subquery here>"
        }
      }
    }
  ],
  "content": "<your step-by-step reasoning here>"
}

Instructions:
1. If the user query can be answered directly using the table, output the reasoning and simulate a tool call using the original query.
2. If the table is insufficient, decompose the question and simulate a tool call for the appropriate subquery.
3. Only generate **one tool call per response**.
4. Do NOT abbreviate any terms in your subquery.
5. After sufficient subqueries have been processed, provide a final answer like:
    <Answer>: [your final response]

Table List_of_National_Football_League_passing_yardage_leaders_1: |   Rank | Player             | Team ( s ) by season                                                                                                | Yards   |
|-------:|:-------------------|:--------------------------------------------------------------------------------------------------------------------|:--------|
|      1 | Tom Brady          | New England Patriots ( 2000 -present )                                                                              | 11,388  |
|      2 | Peyton Manning     | Indianapolis Colts ( 1998 - 2011 ) Denver Broncos ( 2012 - 2015 )                                                   | 7,339   |
|      3 | Brett Favre        | Atlanta Falcons ( 1991 ) Green Bay Packers ( 1992 - 2007 ) New York Jets ( 2008 ) Minnesota Vikings ( 2009 - 2010 ) | 5,855   |
|      4 | Joe Montana        | San Francisco 49ers ( 1979 - 1992 ) Kansas City Chiefs ( 1993 - 1994 )                                              | 5,772   |
|      5 | Ben Roethlisberger | Pittsburgh Steelers ( 2004 -present )                                                                               | 5,256   |
|      6 | Aaron Rodgers      | Green Bay Packers ( 2005 -present )                                                                                 | 5,027   |
|      7 | Drew Brees         | San Diego Chargers ( 2001 - 2005 ) New Orleans Saints ( 2006 -present )                                             | 4,967   |
|      7 | John Elway         | Denver Broncos ( 1983 - 1998 )                                                                                      | 4,964   |
|      9 | Dan Marino         | Miami Dolphins ( 1983 - 1999 )                                                                                      | 4,510   |
|     10 | Kurt Warner        | St. Louis Rams ( 1998 - 2003 ) New York Giants ( 2004 ) Arizona Cardinals ( 2005 - 2009 )                           | 3,952   |
|     11 | Jim Kelly          | Buffalo Bills ( 1986 - 1996 )                                                                                       | 3,863   |
|     12 | Troy Aikman        | Dallas Cowboys ( 1989 - 2000 )                                                                                      | 3,849   |
|     13 | Terry Bradshaw     | Pittsburgh Steelers ( 1970 - 1983 )                                                                                 | 3,833   |
|     14 | Donovan McNabb     | Philadelphia Eagles ( 1999 - 2009 ) Washington Redskins ( 2010 ) Minnesota Vikings ( 2011 )                         | 3,752   |
|     15 | Russell Wilson     | Seattle Seahawks ( 2012 -present )                                                                                  | 3,612   |
|     16 | Steve Young        | Tampa Bay Buccaneers ( 1985 - 1986 ) San Francisco 49ers ( 1987 - 1999 )                                            | 3,326   |
|     17 | Joe Flacco         | Baltimore Ravens ( 2008 - 2018 ) Denver Broncos ( 2019 -present )                                                   | 3,223   |

User Query: What is the middle name of the player with the second most National Football League career rushing yards ?

Please reason and respond in the JSON format described above.

2025-07-25 11:53:58,523 - ./logs/test.log - INFO - Processing query: What is the middle name of the player with the second most National Football League career rushing yards ?
2025-07-25 11:54:08,231 - ./logs/test.log - INFO - Step 1: ['Who is the player with the second most National Football League career rushing yards?']
handling questions:   0%|          | 0/305 [00:10<?, ?it/s]
top table:  List_of_National_Football_League_passing_yardage_leaders_1.xlsx
ChatCompletionMessage(content='```json\n{\n  "tool_calls": [\n    {\n      "function": {\n        "name": "solve_subquery",\n        "arguments": {\n          "subquery": "Who is the player with the second most National Football League career rushing yards?"\n        }\n      }\n    }\n  ],\n  "content": "The user query asks for the middle name of the player with the second most National Football League career rushing yards. The provided table lists passing yardage leaders, not rushing yardage leaders. Therefore, the table is insufficient to answer the question directly. The first step is to identify the player with the second most rushing yards, which requires a separate query."\n}\n```', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None, reasoning=None)
embed doc begin
Traceback (most recent call last):
  File "/home/angela/TableRAG/online_inference/main.py", line 394, in run
    result = future.result()
  File "/home/angela/miniconda3/envs/tablerag/lib/python3.10/concurrent/futures/_base.py", line 453, in result
    self._condition.wait(timeout)
  File "/home/angela/miniconda3/envs/tablerag/lib/python3.10/threading.py", line 320, in wait
    waiter.acquire()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/angela/TableRAG/online_inference/main.py", line 420, in <module>
    agent.run(
  File "/home/angela/TableRAG/online_inference/main.py", line 389, in run
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
  File "/home/angela/miniconda3/envs/tablerag/lib/python3.10/concurrent/futures/_base.py", line 649, in __exit__
    self.shutdown(wait=True)
  File "/home/angela/miniconda3/envs/tablerag/lib/python3.10/concurrent/futures/thread.py", line 235, in shutdown
    t.join()
  File "/home/angela/miniconda3/envs/tablerag/lib/python3.10/threading.py", line 1096, in join
    self._wait_for_tstate_lock()
  File "/home/angela/miniconda3/envs/tablerag/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
